<?php

/**
 * @file
 * Functions to support theming in the Citizen theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_preprocess_html.
 */
  function citizen_preprocess_html(&$variables) {
    $node = \Drupal::routeMatch()->getParameter('node');
    $node_revision = \Drupal::routeMatch()->getParameter('node_revision');
    if(isset($node_revision)){
      $vid = $node_revision->getRevisionId();
    }
    if ($node) {
      if ((!$node instanceof NodeInterface) && (isset($vid))) {
        $node = \Drupal::entityTypeManager()->getStorage('node')->loadRevision($vid);
      }
    //set published or unpublished
      if($node->status[0]->value == '1'){
        $variables['attributes']['class'][] = 'published';
      } else {
        $variables['attributes']['class'][] = 'unpublished';
      }
    }
  }

/**
 * Implements hook_theme_suggestions_page_alter.
 */
function citizen_theme_suggestions_page_alter(array &$suggestions, array $variables, $hook) {
  // Try to get the node, so we can check if we're on the node page.
  $node = Drupal::request()->attributes->get('node');
  $node_revision = \Drupal::routeMatch()->getParameter('node_revision');
  if($node_revision){
    $vid = $node_revision->getRevisionId();
  }
  if ($node) {
    if ((!$node instanceof NodeInterface) && (isset($vid))) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->loadRevision($vid);
    }
    $suggestions[] = 'page__' . $node->getTYpe();
  }
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
    $suggestions[] = 'page__taxonomy__' . $term->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_block_alter.
 */
function citizen_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    $block_name = str_replace(' ','_',strtolower($variables['elements']['content']['#block_content']->label()));
    array_splice($suggestions, 1, 0, 'block__' . $variables['elements']['content']['#block_content']->bundle());
    array_splice($suggestions, 2, 0, 'block__' . $block_name);
    array_splice($suggestions, 3, 0, 'block__' . $variables['elements']['content']['#block_content']->id());
  }
}

/**
 * Implements hook_theme_suggestions_paragraph_alter.
 */
function citizen_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $id = $paragraph->id();
  // array_push($suggestions, 'paragraph__' . $paragraph->getType() . '__' . $id);
  array_push($suggestions, 'paragraph__' . $paragraph->getType() . '__' . $id);
}

/**
 * Implements hook_theme_suggestions_form_alter.
 */
function citizen_theme_suggestions_form_alter(array &$suggestions, array $variables) {
	$formId = $variables['element']['#id'];
	if($formID = 'citizen-toggl-monthly-report'){
		array_push($suggestions, 'form__' . $formId);
	}
}



