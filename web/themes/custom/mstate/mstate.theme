<?php

/**
 * @file
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Template\Attribute;
use Drupal\taxonomy\Entity\Term;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_html().
 */
function mstate_preprocess_html(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $node_revision = \Drupal::routeMatch()->getParameter('node_revision');
  if(isset($node_revision)){
    $vid = $node_revision->getRevisionId();
  }
  if ($node) {
    if ((!$node instanceof NodeInterface) && (isset($vid))) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->loadRevision($vid);
    }
  	//set published or unpublished
    if($node->status[0]->value == '1'){
      $variables['attributes']['class'][] = 'published';
    } else {
      $variables['attributes']['class'][] = 'unpublished';
    }
    if (!empty($node->field_image[0])){
      $variables['attributes']['class'][] = 'has-main-image';
    }
  }
}

/**
 * Implements hook_preprocess webform to add form titles as twig variables.
 */
function mstate_preprocess_webform(&$variables){
  $webform_id = $variables["element"]["#webform_id"];
  $webform = \Drupal\webform\Entity\Webform::load($webform_id);
  if ($webform->get('webform_placer')) {
    $variables['webform_placer'] = TRUE;
  }
  if ($webform->get('show_placer_title')) {
    $variables['show_placer_title'] = TRUE;
  }
  $variables['title'] = $webform->label();
}

function mstate_preprocess_paragraph__form_placer(&$variables) {
  $paragraph = isset($variables['paragraph']) ? $variables['paragraph'] : '';
  if (isset($paragraph->field_form_title->value)) {
    $form_title = $paragraph->field_form_title->value;
    $webform = $variables['elements']['field_form'][0]['#webform'];
    $webform->set('webform_placer', TRUE);
    $webform->set('show_placer_title', $form_title);
  }
}

/**
 * Implements hook_form_alter.
 */
function mstate_form_alter(&$form, FormStateInterface $form_state) {
  if($form['#id'] == 'site-search-form'){
    $form['actions']['submit']['#suffix'] = '<span class="search-icon">Search</span>';
  }
}

/*
// provide width and height dimensions for use in the responsive image template to prevent layout shifts
function mstate_preprocess_responsive_image(&$variables) {
  // get responsive image style in order to map hard-coded dimension values
  $style_id = $variables['responsive_image_style_id'];

  switch ($style_id) {
    case 'hero':
      $img_width = 1000;
      $img_height = 429;
      // get the url for each image style being preloaded
      $deskURL = ImageStyle::load('hero_desk')->buildUrl($variables['uri']);
      $mediumDeskURL = ImageStyle::load('hero_medium')->buildUrl($variables['uri']);
      $largeDeskURL = ImageStyle::load('hero_large')->buildUrl($variables['uri']);
      $xlargeDeskURL = ImageStyle::load('hero_xlarge')->buildUrl($variables['uri']);
      $ultraDeskURL = ImageStyle::load('hero_ultra')->buildUrl($variables['uri']);
      // construct links for each image style being preloaded
      $deskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $deskURL,'media' => '(min-width:896px) and (max-width:1143.9px)',],];
      $mediumDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $mediumDeskURL,'media' => '(min-width:1144px) and (max-width:1383.9px)',],];
      $largeDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $largeDeskURL,'media' => '(min-width:1383px) and (max-width:1699.9px)',],];
      $xlargeDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $xlargeDeskURL,'media' => '(min-width:1700px) and (max-width:1999.9px)',],];
      $ultraDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $ultraDeskURL,'media' => '(min-width:2000px)',],];
      // attach links for each image style being preloaded
      $variables['#attached']['html_head'][] = [$deskLinkTag, 'preloadHeroImageDesk'];
      $variables['#attached']['html_head'][] = [$mediumDeskLinkTag, 'preloadHeroImageMediumDesk'];
      $variables['#attached']['html_head'][] = [$largeDeskLinkTag, 'preloadHeroImageLargeDesk'];
      $variables['#attached']['html_head'][] = [$xlargeDeskLinkTag, 'preloadHeroImageXlargeDesk'];
      $variables['#attached']['html_head'][] = [$ultraDeskLinkTag, 'preloadHeroImageUltraDesk'];
      break;
      case 'hero_tall':
        $img_width = 1000;
        $img_height = 541;
        // get the url for each image style being preloaded
        $deskURL = ImageStyle::load('hero_tall_desk')->buildUrl($variables['uri']);
        $mediumDeskURL = ImageStyle::load('hero_tall_medium')->buildUrl($variables['uri']);
        $largeDeskURL = ImageStyle::load('hero_tall_large')->buildUrl($variables['uri']);
        $xlargeDeskURL = ImageStyle::load('hero_tall_xlarge')->buildUrl($variables['uri']);
        $ultraDeskURL = ImageStyle::load('hero_tall_ultra')->buildUrl($variables['uri']);
        // construct links for each image style being preloaded
        $deskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $deskURL,'media' => '(min-width:896px) and (max-width:1143.9px)',],];
        $mediumDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $mediumDeskURL,'media' => '(min-width:1144px) and (max-width:1383.9px)',],];
        $largeDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $largeDeskURL,'media' => '(min-width:1383px) and (max-width:1699.9px)',],];
        $xlargeDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $xlargeDeskURL,'media' => '(min-width:1700px) and (max-width:1999.9px)',],];
        $ultraDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $ultraDeskURL,'media' => '(min-width:2000px)',],];
        // attach links for each image style being preloaded
        $variables['#attached']['html_head'][] = [$deskLinkTag, 'preloadHeroImageDesk'];
        $variables['#attached']['html_head'][] = [$mediumDeskLinkTag, 'preloadHeroImageMediumDesk'];
        $variables['#attached']['html_head'][] = [$largeDeskLinkTag, 'preloadHeroImageLargeDesk'];
        $variables['#attached']['html_head'][] = [$xlargeDeskLinkTag, 'preloadHeroImageXlargeDesk'];
        $variables['#attached']['html_head'][] = [$ultraDeskLinkTag, 'preloadHeroImageUltraDesk'];
        break;
    case 'background':
      $img_width = 1504;
      $img_height = 1004;
      break;
    case 'full_non_crop':
      $img_width = 1264;
      $img_height = 800;
      break;    
    case 'large_non_crop':
      $img_width = 800;
      $img_height = 533;
      break;
    case 'medium_non_crop':
      $img_width = 504;
      $img_height = 337;
      break;
    case 'small_non_crop':
      $img_width = 290;
      $img_height = 184;
     break;
    case '860x535':
      $img_width = 860;
      $img_height = 535;
      break;
    case '860x717':
      $img_width = 860;
      $img_height = 717;
      break;
    case '800x688':
      $img_width = 800;
      $img_height = 688;
      break;
    case '550x344_alt':
      $img_width = 550;
      $img_height = 344;
      break;
    case '550x344':
      $img_width = 550;
      $img_height = 344;
      break;
    case '504x420':
      $img_width = 504;
      $img_height = 420;
      break;
    case '360x360':
      $img_width = 360;
      $img_height = 360;
      break;
    case '352x264':
      $img_width = 352;
      $img_height = 264;
      break;
    default:
      $img_width = 'default';
      $img_height = 'default';
      break;
  }

  // set responsive fallback image attributes for width, height, fetchpriority
  if (!($img_width == 'default' || $img_height == 'default' )) {
    $variables['img_element']['#attributes']['width'] = $img_width;
    $variables['img_element']['#attributes']['height'] = $img_height;
    if ($style_id == 'hero'){
      $variables['img_element']['#attributes']['fetchpriority'] = 'high';
    }
    if ($style_id == 'hero_tall'){
      $variables['img_element']['#attributes']['fetchpriority'] = 'high';
    }
  }
}
*/

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function mstate_theme_suggestions_page_alter(array &$suggestions, array $variables, $hook) {
  // Try to get the node, so we can check if we're on the node page.
  $node = Drupal::request()->attributes->get('node');
  $node_revision = \Drupal::routeMatch()->getParameter('node_revision');
  if($node_revision){
    $vid = $node_revision->getRevisionId();
  }
  if ($node) {
    if ((!$node instanceof NodeInterface) && (isset($vid))) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->loadRevision($vid);
    }
    $suggestions[] = 'page__' . $node->getTYpe();
  }
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
    $suggestions[] = 'page__taxonomy__' . $term->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function mstate_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    $block_name = str_replace(' ','_',strtolower($variables['elements']['content']['#block_content']->label()));
    array_splice($suggestions, 1, 0, 'block__' . $variables['elements']['content']['#block_content']->bundle());
    array_splice($suggestions, 2, 0, 'block__' . $block_name);
    array_splice($suggestions, 3, 0, 'block__' . $variables['elements']['content']['#block_content']->id());
  }
}

/**
 * Implements hook_theme_suggestions_paragraph_alter().
 */
function mstate_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $id = $paragraph->id();
  // array_push($suggestions, 'paragraph__' . $paragraph->getType() . '__' . $id);
  array_push($suggestions, 'paragraph__' . $paragraph->getType() . '__' . $id);
}