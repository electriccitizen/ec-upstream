/* ============
	STYLE MIXINS
======================= */

@use '../variables' as *;
@use 'sass:math';

@mixin overlay($overlayColor) {
  &:before {
    content: '';
    display: block;
    width: 100%;
    height: 100%;
    background: $overlayColor;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 2;
  }
}

@mixin listReset {
  list-style: none;
  margin: 0;
  padding: 0;
}

@mixin fullBack($fullback) {
  content: '';
  display: block;
  position: absolute;
  top: 0;
  left: -50vw;
  z-index: -1;
  width: 200vw;
  height: 100%;
  background: $fullback;
}

@mixin vertRule($rulePosition, $ruleHeight, $ruleColor) {
  content: '';
  display: block;
  position: absolute;
  #{$rulePosition}: 0;
  top: math.div(100% - $ruleHeight, 2);
  width: 1px;
  height: $ruleHeight;
  background: $ruleColor;
}

@mixin gradient($grad-direction, $grad-start, $gradStartPercent, $grad-stop) {
  background: -moz-linear-gradient($grad-direction, $grad-start $gradStartPercent, $grad-stop 100%);
  /* FF3.6+ */
  background: -webkit-linear-gradient($grad-direction, $grad-start $gradStartPercent, $grad-stop 100%);
  /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient($grad-direction, $grad-start $gradStartPercent, $grad-stop 100%);
  /* Opera 11.10+ */
  background: -ms-linear-gradient($grad-direction, $grad-start $gradStartPercent, $grad-stop 100%);

  /* IE10+ */
  @if $grad-direction =='top' {
    background: linear-gradient(to bottom, $grad-start $gradStartPercent, $grad-stop 100%);
    /* W3C */
  }

  @else if $grad-direction =='bottom' {
    background: linear-gradient(to top, $grad-start $gradStartPercent, $grad-stop 100%);
    /* W3C */
  }

  @else if $grad-direction =='left' {
    background: linear-gradient(to right, $grad-start $gradStartPercent, $grad-stop 100%);
    /* W3C */
  }

  @else if $grad-direction =='right' {
    background: linear-gradient(to left, $grad-start $gradStartPercent, $grad-stop 100%);
    /* W3C */
  }

}

@mixin triangle($triDirection, $triHeight, $triWidth, $triColor) {
  width: 0;
  height: 0;
  -webkit-transform: rotate(0.05deg);
  -moz-transform: scale(1.1);
  transform: rotate(0.05deg);
  $actualWidth: math.div($triWidth, 2);
  $actualHeight: math.div($triWidth, 2);

  @if $triDirection =='up' {
    border-right: $actualWidth double rgba(0, 0, 0, 0);
    border-left: $actualWidth double rgba(0, 0, 0, 0);
    border-bottom: $triHeight solid $triColor;
  }

  @else if $triDirection =='down' {
    border-right: $actualWidth double rgba(0, 0, 0, 0);
    border-left: $actualWidth double rgba(0, 0, 0, 0);
    border-top: $triHeight solid $triColor;
  }

  @else if $triDirection =='left' {
    border-top: $actualHeight double rgba(0, 0, 0, 0);
    border-bottom: $actualHeight double rgba(0, 0, 0, 0);
    border-right: $triWidth solid $triColor;
  }

  @else if $triDirection =='right' {
    border-top: $actualHeight double rgba(0, 0, 0, 0);
    border-bottom: $actualHeight double rgba(0, 0, 0, 0);
    border-left: $triWidth solid $triColor;
  }
}

@mixin lightBack($lightText, $lightLink) {

  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  div,
  li,
  .field-caption {
    color: $lightText;
    -webkit-font-smoothing: subpixel-antialiased;
  }

  :before,
  :after {
    color: $lightText;
  }

  a {
    color: $lightLink;

    &:hover,
    &:focus {
      opacity: .6;
      @include transAll(.3s);
    }
  }
}

@mixin darkBack($darkText, $darkLink) {

  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  div,
  li,
  .field-caption {
    color: $darkText;
    -webkit-font-smoothing: antialiased;
  }

  :before,
  :after {
    color: $darkText;
  }

  a {
    color: $darkLink;

    &:hover,
    &:focus {
      opacity: .6;
      @include transAll(.3s);
    }
  }
}

@mixin setDimensions($width, $height) {
  width: #{$width};
  height: #{$height};
}