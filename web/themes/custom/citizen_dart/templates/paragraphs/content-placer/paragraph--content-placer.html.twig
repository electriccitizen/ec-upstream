{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% block widgetContent %}
	{# get the values we need #}
	{% set contentType = content.field_content_type.0['#title']|lower %}
	{% if contentType == 'events' %}
		{% set listType = content.field_event_list_type.0['#markup'] %}
	{% elseif contentType == 'news' %}
		{% set listType = content.field_news_list_type.0['#markup'] %}
	{% elseif contentType == 'bios' %}
		{% set listType = content.field_bio_list_type.0['#markup'] %}
	{% endif %}
	<div class="view-widget widget-{{ contentType }} {{ listType }}">
	  {# if a custom list, display the correct list view based on the values above. #}
	  {% if listType == 'custom'%}
	  	{% if paragraph.id.value %}
			{% if drupal_view(contentType,contentType~'_list', paragraph.id.value)|render|striptags|trim|length > 0 %}
				{% embed 'paragraph.html.twig' %}
					{% block widgetContent %}
						<div class="view-widget widget-event-list">
				  			{{ drupal_view(contentType,contentType~'_list', paragraph.id.value) }}
						</div>
						{{ content.field_link }}			
					{% endblock %}	
				{% endembed %}
			{% endif %}
		{% else %}
			<p><strong>Events list widgets are not available in preview until the node is saved after they have been added.</strong></p>
		{% endif %}
	  {# otherwise, just display the view that was selected #}
	  {% else %}
	  	{{ drupal_view(contentType,listType) }}
		{{ content.field_link }}
	  {% endif %}
	</div>
{% endblock %}
